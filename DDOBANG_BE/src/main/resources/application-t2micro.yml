# t2.micro 환경 최적화 설정 (AWS EC2 1GB RAM)
spring:
  config:
    activate:
      on-profile: t2micro

  # 데이터베이스 최적화 (메모리 효율적 H2 설정)
  datasource:
    url: jdbc:h2:mem:t2micro;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;CACHE_SIZE=8192;PAGE_SIZE=512
    username: sa
    password:
    driver-class-name: org.h2.Driver
    hikari:
      # 연결 풀 최적화 (t2.micro 환경)
      maximum-pool-size: 5
      minimum-idle: 2
      connection-timeout: 10000
      idle-timeout: 300000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      pool-name: "T2MicroPool"
      
  # JPA 최적화
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false  # 로그 최소화
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: false
        # 배치 처리 최적화
        jdbc:
          batch_size: 10
          fetch_size: 50
        # 메모리 최적화
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
        # 통계 비활성화 (메모리 절약)
        generate_statistics: false

  # Redis 최적화 (메모리 효율적)
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 1500ms
      lettuce:
        pool:
          max-active: 4
          max-idle: 2
          min-idle: 1
          max-wait: 2000ms
          time-between-eviction-runs: 30000ms

  # 웹 서버 최적화
  server:
    tomcat:
      threads:
        max: 50          # 최대 스레드 수 제한
        min-spare: 10    # 최소 스레드 수
      connection-timeout: 5000
      # 압축 활성화 (대역폭 절약)
      compression:
        enabled: true
        mime-types: application/json,application/xml,text/html,text/xml,text/plain,text/css,text/javascript
        min-response-size: 1024
      max-connections: 200  # 동시 연결 수 제한
      accept-count: 50      # 대기열 크기

  # 캐시 최적화
  cache:
    type: redis
    redis:
      time-to-live: 300000  # 5분 (메모리 절약)
      cache-null-values: false

# 서버 최적화 설정
server:
  port: 8080
  # 메모리 효율적 에러 처리
  error:
    include-stacktrace: never
    include-message: on_param

# 액추에이터 최적화 (필수만)
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when_authorized
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        step: 30s  # 메트릭 수집 간격 증가
    tags:
      application: ${spring.application.name}
      environment: t2micro
    # 불필요한 메트릭 비활성화
    enable:
      jvm: true
      system: true
      web: true
      jdbc: false  # 메모리 절약

# 로깅 최적화 (메모리 및 I/O 절약)
logging:
  level:
    root: WARN
    com.ddobang.backend: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    org.springframework.web: WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{20} - %msg%n"
  logback:
    rollingpolicy:
      max-file-size: 50MB
      max-history: 3

# 커스텀 설정 최적화
custom:
  # SSE 최적화
  sse:
    timeout: 300000  # 5분 (메모리 절약)
    
  # 캐시 TTL 최적화
  cache:
    ttl:
      regions: 1800    # 30분
      themes: 900      # 15분  
      parties: 180     # 3분 (더 자주 업데이트)
      
  # 파일 업로드 최적화
  fileUpload:
    maxSize: 5MB       # 파일 크기 제한
    dirPath: /tmp/ddobang
    
  # 스레드 풀 최적화
  async:
    core-pool-size: 2
    max-pool-size: 5
    queue-capacity: 50
    thread-name-prefix: "T2Micro-"

# JWT 설정 (동일 유지)
jwt:
  secret-key: ${JWT_SECRET_KEY:ddobang-t2micro-optimized-secret-key}
  access-token-expiry: 900000      # 15분
  refresh-token-expiry: 604800000  # 7일
  signup-token-expiry: 1800000     # 30분

# OAuth2 설정
oauth:
  kakao:
    client-id: ${OAUTH_KAKAO_CLIENT_ID:test-client-id}
    client-secret: ${OAUTH_KAKAO_CLIENT_SECRET:test-client-secret}

# AWS S3 설정 (선택적)
aws:
  s3:
    access-key: ${AWS_S3_ACCESS_KEY:}
    secret-key: ${AWS_S3_SECRET_KEY:}
    bucket: ${AWS_S3_BUCKET:ddobang-t2micro}
    region: ${AWS_S3_REGION:ap-northeast-2}